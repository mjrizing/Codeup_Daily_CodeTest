[1054]
두 개의 참(1) 또는 거짓(0)이 입력될 때,
모두 참일 때에만 참을 출력하는 프로그램을 작성해보자.


참고
논리연산자 && 는 주어진 2개의 논리값이 모두 참(1) 일 때에만 1(참)로 계산하고,
그 외의 경우에는 0(거짓) 으로 계산한다.

이러한 논리연산을 AND 연산이라고도 부르고, · 으로 표시하거나 생략하며,
집합 기호로는 ∩(교집합, intersection)을 의미한다. 모두 같은 의미이다.

참, 거짓의 논리값(boolean value)인 불 값을 다루어주는 논리연산자는
!(not), &&(and), ||(or) 이 있다.

** 불 대수(boolean algebra)는 수학자 불이 만들어낸 것으로
참/거짓만 가지는 논리값과 그 연산을 다룬다.

예시
printf("%d", 1&&1); //둘 다 참을 의미하므로 1로 계산되어 출력된다.


입력
1 또는 0의 값만 가지는 2개의 정수가 공백을 두고 입력된다.


출력
둘 다 참(1)일 경우에만 1을 출력하고, 그 외의 경우에는 0을 출력한다.


입력 예시   
1 1

출력 예시
1

[답]
#include <stdio.h>

int main() {
    int a, b, result; //정수형 변수 a, b, 결과값을 저장할 result변수선언
    scanf("%d %d", &a, &b); //a와b에 수를 넣어야하기때문에 앞에 &포인터
    result = a&&b; //결과값 result는 a와 b의 AND연산
    printf("%d", result);
    
    return 0;
    
}



---------------------------------------------------------------------------------------------------------------

[1055]
두 개의 참(1) 또는 거짓(0)이 입력될 때,
하나라도 참이면 참을 출력하는 프로그램을 작성해보자.


참고
논리연산자 || 는 주어진 2개의 논리값 중에 하나라도 참(1) 이면 1(참)로 계산하고,
그 외의 경우에는 0(거짓) 으로 계산한다.

** | 기호는 쉬프트를 누른 상태에서 백슬래시(\)를 누르면 나오는 기호로,
버티컬 바(vertical bar) 기호이다.

이러한 논리연산을 OR 연산이라고도 부르고,
+ 로 표시하며, 집합 기호로는 ∪(합집합, union)을 사용한다. 모두 같은 의미이다.

참, 거짓의 논리값(boolean value)인 불 값을 다루어주는 논리연산자는
!(not), &&(and), ||(or) 이 있다.

** 불 대수(boolean algebra)는 수학자 불이 만들어낸 것으로
참/거짓만 가지는 논리값과 그 연산을 다룬다.

예시
printf("%d", 0||0); //둘 다 거짓을 의미하므로 0이 계산되어 출력된다.


입력
1 또는 0의 값만 가지는 2개의 정수가 공백을 두고 입력된다.


출력
하나라도 참일 경우 1을 출력하고, 그 외의 경우에는 0을 출력한다.


[답]
#include <stdio.h>

int main() {
    int a, b, result;
    scanf("%d %d", &a, &b);
    result = a||b;
    printf("%d", result);
    
    
    
    return 0;    
}



---------------------------------------------------------------------------------------------------------------

[1056]
두 가지의 참(1) 또는 거짓(0)이 입력될 때,
참/거짓이 서로 다를 때에만 참을 출력하는 프로그램을 작성해보자.


참고
이러한 논리연산을 XOR(exclusive or, 배타적 논리합)연산이라고도 부른다.
집합의 의미로는 합집합에서 교집합을 뺀 것을 의미한다. 모두 같은 의미이다.

논리연산자는 사칙연산자와 마찬가지로 여러 번 중복해서 사용할 수 있는데,
연산의 순서를 만들어주기 위해 괄호 ( )를 사용해 묶어 주면 된다.

수학에서는 괄호, 중괄호, 대괄호를 사용하지만 C언어에서는 소괄호 ( )만을 사용한다.

예시
printf(“%d”, (a&&!b)||(!a&&b)); //참/거짓이 서로 다를 때에만 1로 계산


입력
1 또는 0의 값만 가지는 2개의 정수가 공백을 두고 입력된다.


출력
참/거짓이 서로 다를 때에만 1을 출력하고, 그 외의 경우에는 0을 출력한다.


입력 예시   
1 1

출력 예시
0

[답]
#include <stdio.h>
    int main() {
    int a, b, result; 
    scanf("%d %d", &a, &b);
    result = a ^ b;
    printf("%d", result);
        
        
     return 0;
     
}



---------------------------------------------------------------------------------------------------------------

[1057]
두 개의 참(1) 또는 거짓(0)이 입력될 때,
참/거짓이 서로 같을 때에만 참이 계산되는 프로그램을 작성해보자.


입력
1 또는 0의 값만 가지는 2개의 정수가 공백을 두고 입력된다.


출력
참/거짓이 서로 같을 때에만 1을 출력하고, 그 외의 경우에는 0을 출력한다.


입력 예시   
0 0

출력 예시
1


[답]
#include <stdio.h>
int main() {
  int a, b, result;
  scanf("%d %d", &a, &b);
  result = !(a ^ b);
  printf("%d", result);
  

  return 0;
}
---------------------------------------------------------------------------------------------------------------

[1058]
두 개의 참(1) 또는 거짓(0)이 입력될 때,
모두 거짓일 때에만 참이 계산되는 프로그램을 작성해보자.


입력
1 또는 0의 값만 가지는 2개의 정수가 공백을 두고 입력된다.


출력
둘 다 거짓일 경우에만 1을 출력하고, 그 외의 경우에는 0을 출력한다.


입력 예시   
0 1

출력 예시
0두 개의 참(1) 또는 거짓(0)이 입력될 때,
모두 거짓일 때에만 참이 계산되는 프로그램을 작성해보자.


입력
1 또는 0의 값만 가지는 2개의 정수가 공백을 두고 입력된다.


출력
둘 다 거짓일 경우에만 1을 출력하고, 그 외의 경우에는 0을 출력한다.


입력 예시   
0 1

출력 예시
0

[답]
#include <stdio.h>

int main() {
    int a, b, result;
    scanf("%d %d", &a, &b);
    result = !(a || b);
    printf("%d",result);
    
    return 0;
}



---------------------------------------------------------------------------------------------------------------

[1059]
입력 된 정수를 비트단위로 참/거짓을 바꾼 후 정수로 출력해보자.
비트단위(bitwise)연산자 ~ 를 붙이면 된다.(~ : tilde, 틸드라고 읽는다.)


** 비트단위(bitwise) 연산자는,
~(bitwise not), &(bitwise and), |(bitwise or), ^(bitwise xor),
<<(bitwise left shift), >>(bitwise right shift)
가 있다.

예를 들어 1이 입력되었을 때 저장되는 1을 32비트 2진수로 표현하면
        00000000 00000000 00000000 00000001 이고,
~1은 11111111 11111111 11111111 11111110 가 되는데 이는 -2를 의미한다.


예시
int a=1;
printf("%d", ~a); //-2가 출력된다.

참고
컴퓨터에 저장되는 모든 데이터들은 2진수 형태로 바뀌어 저장된다.
0과 1로만 구성되는 비트단위들로 변환되어 저장되는데,
양의 정수는 2진수 형태로 바뀌어 저장되고,
음의 정수는 "2의 보수 표현"방법으로 저장된다.

예를 들어 int형(4바이트(byte), 32비트)으로 선언된 변수에 양의 정수 5를 저장하면
5의 2진수 형태인 101이 32비트로 만들어져
00000000 00000000 00000000 00000101
로 저장된다.(공백은 보기 편하도록 임의로 분리)

int 형의 정수 0은
00000000 00000000 00000000 00000000

그리고 -1은 0에서 1을 더 빼고 32비트만 표시하는 형태로
11111111 11111111 11111111 11111111 로 저장된다.

-2는 -1에서 1을 더 빼면 된다.
11111111 11111111 11111111 11111110 로 저장된다.

그래서 int 형으로 선언된 변수에는 최소 -2147483648 을 의미하는
10000000 00000000 00000000 00000000 부터

최대 +2147483647 을 의미하는
01111111 11111111 11111111 11111111 로 저장될 수 있는 것이다.

그렇다면 -2147483648
10000000 00000000 00000000 00000000 에서 1을 더 뺀다면?

01111111 11111111 11111111 11111111 이 된다.
즉 -2147483649 가 아닌 +2147483647 이 되는 것이다.

이러한 것을 오버플로우(overflow, 넘침)라고 한다.

이러한 내용을 간단히 표시하면, 정수 n이라고 할 때,

~n = -n - 1
-n = ~n + 1 과 같은 관계로 표현된다.

이 관계를 그림으로 그려보면 마치 원형으로 수들이
상대적으로 배치된 것과 같다.


[답]
#include <stdio.h>
 
 
int main (){
    int a,result;
    
    scanf("%d", &a);
    result = ~a;
    printf("%d",result);
 
    return 0;
}



